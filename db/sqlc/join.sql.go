// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: join.sql

package db

import (
	"context"
)

const getUserAndAccounts = `-- name: GetUserAndAccounts :many
SELECT u.username, u.full_name as name, u.email, a.balance, a.currency FROM users u 
INNER JOIN accounts a ON users.owner = acccount.owner
ORDER BY u.username
`

type GetUserAndAccountsRow struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) GetUserAndAccounts(ctx context.Context) ([]GetUserAndAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserAndAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserAndAccountsRow{}
	for rows.Next() {
		var i GetUserAndAccountsRow
		if err := rows.Scan(
			&i.Username,
			&i.Name,
			&i.Email,
			&i.Balance,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
